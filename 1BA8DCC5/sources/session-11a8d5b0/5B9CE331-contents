---
output: github_document
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%"
)
```


# powergene: A simulation-based power analysis R Package to aid the design of robust semi-field vector control experiments

<!-- badges: start -->

<!-- badges: end -->

The powergene R package simulates mosquito count data under short- and long-term semi-field experimental design scenarios, evaluating single or combined interventions. It incorporates fixed treatment effects and random chamber-level variability to support robust power analysis and semi-field experimental planning. 

This package is an extension of a simulation based power analysis framework developed by [Kipingu et. al 2025](https://doi.org/10.1186/s12936-025-05454-y
). Therefore, all parameter values for the examples below are taken directily from the same study. Visit [Kipingu et. al 2025](https://doi.org/10.1186/s12936-025-05454-y
) for more information and description regarding simulation-based power analysis.

## Installation of powergene package

You can install the development version of powergene package directly from
[GitHub](https://github.com/) with:


```r
# First, install.packages("devtools") if not already installed
install.packages("devtools")
# Then, instal the "powergene" package from github
devtools::install_github("akipingu/powergene")
```

```{r}
#load package library
library("powergene")
```

## Example 1: Estimating power of a short-term SFE testing single intervention

This is a basic example which shows you how to apply the powergene package to estimate power of a short-term SFE

(i) Simulate a table of scenarios based on number of chamber per treatment provided, e.g., n.ch.per.trt=4. After specifying number of chamber per each treatment (control vs. intervention), the function sim.scen.shortsfe.sinint will output three columns including number of chambers per each treatment (replicates), treatment status (0 for control and 1 for intervention) and id for each individual chamber/replicate.

```{r}
scen.table <- sim.scen.shortsfe.sinint(n.ch.per.trt = 4)

#print a scenario table
scen.table
```


(ii) Simulate mosquitoes counts/abundance by specifying the number of chambers per treatment, e.g., n.ch.per.trt = 4, expected mosquitoes to be recaptured from a control chamber, e.g., lambda=50, intervention effect, e.g., interv.effect = 0.8 for 80% effect, and chamber-level variance, e.g., chamber.var = 0.1807. The resultant number of mosquitoes will be either with random effect included or without including the random effect. Below, columns 4, 5 and 6 because they are optional but you can print them if you want. Remember our main target is the mosquito abundance that account for chamber random effect.

```{r}
sim.mosquitoes <- sim.mosq.shortsfe.sinint(
  n.ch.per.trt = 4,
  lambda = 50,
  interv.effect = 0.8,
  chamber.var = 0.1807
)

#output mosquito counts per each chamber
sim.mosquitoes <- sim.mosquitoes[, c(-4,-5,-6)]
sim.mosquitoes
```

(iii) Estimate p-value using sim.pval.shortsfe.sinint function by specifying the number of chambers per treatment, e.g., n.ch.per.trt = 4, expected mosquitoes to be recaptured from a control chamber, e.g., lambda=50, intervention effect, e.g., interv.effect = 0.8 for 80% effect, and chamber-level variance, e.g., chamber.var = 0.1807. The p-value estimation is based on mosquito abundance that accounted for random chamber effect.

```{r}
pvalue <- sim.pval.shortsfe.sinint(
    n.ch.per.trt = 4,
  lambda = 50,
  interv.effect = 0.8,
  chamber.var = 0.1807
)

#output the p-values
pvalue
```

(iv) Since power cannot be estimated from a single simulation, there is a need to simulate multiple data sets and estimate power. Now you can estimate power by specifying the number of chambers per treatment, e.g., n.ch.per.trt = 4, expected mosquitoes to be recaptured from a control chamber, e.g., lambda=50, intervention effect, e.g., interv.effect = 0.8 for 80% effect, chamber-level variance, e.g., chamber.var = 0.1807, and the total simulations, e.g., nsim=100. A 100 simulations are just for illustration purpose, but it is recommended to run at least 1000 simulations if you are estimating power for a real experiment. The power estimation is based on mosquito abundance that accounted for random chamber effect.

```{r}
power.estimate <- sim.power.shortsfe.sinint(n.ch.per.trt = 4,
  lambda = 50,
  interv.effect = 0.8,
  chamber.var = 0.1807, nsim = 100
  )

#print estimated power
round(power.estimate,2)
```

(v) Now you use the function to estimate power for varied number of chambers per treatment, e.g., 2,4,6,8. 

```{r}
# Define treatment sizes
n.ch.values <- c(2, 4, 6, 8)

# Initialize storage
power.df <- data.frame(
  n.ch.per.trt = n.ch.values,
  power = NA,
  ci.lower = NA,
  ci.upper = NA
)

# Run simulations and extract power + confidence intervals
for (i in seq_along(n.ch.values)) {
  n <- n.ch.values[i]
  
  result <- sim.power.shortsfe.sinint(
    n.ch.per.trt = n,
    lambda = 50,
    interv.effect = 0.8,
    chamber.var = 0.1807,
    nsim = 100
  )
  
  # Store results
  power.df$power[i] <- result["power"]
  power.df$ci.lower[i] <- result["ci.lower"]
  power.df$ci.upper[i] <- result["ci.upper"]
}

#print the power results for each number of chambers per treatment
round(power.df,2)
```

(vi) Plot the resulting power vs. number of chambers per treatment

```{r}
library(ggplot2)

ggplot(power.df, aes(x = n.ch.per.trt, y = power)) +
  geom_point(color = "black", size = 2) +
  geom_line(color = "black", linewidth = 0.4) +
  geom_errorbar(aes(ymin = ci.lower, ymax = ci.upper),
                width = 0.4, color = "black", linewidth = 0.4) +
  labs(
    x = "Number of chambers per treatment",
    y = "Estimated power",
    title = "Power vs. number of chambers per treatment with 95% CI"
  ) +
  scale_y_continuous(labels = scales::percent, limit=c(0,1), breaks=seq(0,1,0.2)) +
  geom_hline(yintercept=0.8, lty="twodash") +
  geom_hline(yintercept=0.05, lty="longdash") +  
  theme_bw()
```

(vii) Now you use the function to estimate power for varied number of chambers per treatment, e.g., 2,4,6,8 and varied effect size of an intervention.

```{r}
# Define parameter grids
n.ch.values <- c(2, 4, 6, 8)
effect.sizes <- c(0, 0.4, 0.5, 0.6, 0.8)

# Initialize results storage
results <- expand.grid(
  n.ch.per.trt = n.ch.values,
  interv.effect = effect.sizes
)
results$power <- NA
results$ci.lower <- NA
results$ci.upper <- NA

# Loop over combinations
for (i in seq_len(nrow(results))) {
  row <- results[i, ]
  
  sim <- sim.power.shortsfe.sinint(
    n.ch.per.trt = row$n.ch.per.trt,
    lambda = 50,
    interv.effect = row$interv.effect,
    chamber.var = 0.1807,
    nsim = 100
  )
  
  results$power[i] <- sim["power"]
  results$ci.lower[i] <- sim["ci.lower"]
  results$ci.upper[i] <- sim["ci.upper"]
}
# print power estimates
results
```

(viii) Now plot the resulting power estimates vs. number of chambers per treatment or effect sizes.

```{r}
library(ggplot2)
results$interv.effect <- factor(results$interv.effect, levels = sort(unique(results$interv.effect), decreasing = TRUE))
ggplot(results, aes(x = n.ch.per.trt, y = power, color = factor(interv.effect), group = interv.effect)) +
  geom_point(size = 2) +
  geom_line(linewidth = 0.8) +
  geom_errorbar(aes(ymin = ci.lower, ymax = ci.upper),
                width = 0.3, linewidth = 0.6) +
  geom_hline(yintercept = 0.8, linetype = "twodash", color = "gray50") +
  geom_hline(yintercept = 0.05, linetype = "longdash", color = "gray50") +
  scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
  scale_color_brewer(palette = "Dark2", name = "Effect size \n(% reduction)",
                       labels = function(x) as.character(as.numeric(x) * 100)) +
  labs(
    x = "Number of chambers per treatment",
    y = "Estimated power",
    title = "Power vs. number of chamber per treatment by intervention effect Size"
  ) +
  theme_bw()
```



