#creating a function that simulate data sets and calculate power
simres.tab <-
  sapply(1:nrow(param), function(i) {
    print(paste0(i, "/", nrow(param)))
    # i=1
    # design choices
    n.ch.per.trt <- param$n.ch.per.trt[i]
    llin.lev <- 0:1
    
    # make template data set representing design 
    dat <-
      expand.grid(replicates = 1:n.ch.per.trt, llin = llin.lev)
    
    dat$chamber <- factor(factor(paste(dat$llin, dat$replicate, sep = "-")))
    # rearranging data set in a useful order
    dat <- dat[, c("replicates", "llin", "chamber")]
    
    # parameter choices - fixed effects
    # mean catch mosquito count in control group
    lambda <- param$lambda[i]

    llin.effect <- param$llin.effect[i] 
    #mosquito count in llin chamber
    #lambda * llin.effect
    #interchamber variance
    chamber.var <- param$chamber.var[i]
    # theta <- param$theta[i] 
    # theta is a dispersion/variability parameter for negative binomial distribution 
    # measures how sample (i.e., mosquito counts in our case) fluctuates around the mean
    
    # Coefficients (parameter values) for the linear predictor terms
    b.0 <- log(lambda)
    b.l <- log(llin.effect)

    sim.dat.fun <- function(dat,b.0,b.l,chamber.var){
      # simulate random effects
      chamber.re <- rnorm(nlevels(dat$chamber), sd = sqrt(chamber.var))
      names(chamber.re) <- levels(dat$chamber)
      
      # simulate linear predictor
      dat$lin.pred <-
        b.0 +  b.l * dat$llin + 
        chamber.re[as.character(dat$chamber)] 
      
      dat$mosquito.count <- rpois(nrow(dat), exp(dat$lin.pred)) 
      dat$ixn.effect <- dat$ixn.effect
      dat
    }
    simdat <- sim.dat.fun(dat,b.0,b.l,chamber.var)
    
    ######## Predicting the power of a semi-field experiment of combination of ppf and llin using a negative binomial GLMM ###########
    
    # Try setting the null hypothesis that the mosquito counts are the same between control chambers to those with both ppf and llin
    # OR mosquito counts are the same between llin chambers and chambers with both ppf and llin OR there's resistance to combination 
    # between ppf and llin
    
    # outputting the parameter estimates and the p-values from the simulation function
    sim.mos.pval <- function(...){
      simdat2 <- sim.dat.fun(dat,b.0,b.l,chamber.var)
      # model.llin <- glmer(mosquito.count ~ llin+(1|chamber), family=poisson, data=simdat2)
      # p <- coef(summary(model.llin))[2, "Pr(>|z|)"]
      model.llin <-glmmTMB(mosquito.count ~ llin+(1|chamber),data=simdat2,family=poisson)
      p <- coef(summary(model.llin))$cond[2, "Pr(>|z|)"]
      c(p = p)
      # c(pa = p.adjust(p, method="bonferroni"))
    }
    
    sim.pvals.list <- mclapply(1:param$nsim[i], sim.mos.pval, mc.cores = detectCores())
    sim.pvals <- do.call("rbind", sim.pvals.list)
    # compare the mean of multiple estimates to the true parameter values.
    # return power estimates
    n.sig <- sum(sim.pvals[, "p"] < 0.05, na.rm = TRUE)
    print(sim.pvals[, "p"])
    out <- 
      c(power = n.sig/param$nsim[i],
        binom.test(x = n.sig, n = param$nsim[i])$conf.int)
    names(out)[2:3] <- c("ci.lower", "ci.upper")
    out
  })
