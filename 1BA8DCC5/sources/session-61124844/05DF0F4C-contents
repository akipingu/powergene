#' Simulate Experimental Design for Short-Term Semi-Field Intervention
#'
#' Constructs a template dataset representing a short-term semi-field experiment
#' with two ITN intvn levels and a specified number of chambers per intvn.
#' Each chamber is uniquely identified by its intvn and replicate combination.
#'
#' @details
#' This case study considers various design parameters including:
#' - Number of chambers per intvn (`n.ch.per.trt`), e.g., 4
#' - Expected mosquitoes to be recaptured in control chamber (`lambda`), e.g., 50
#' - Proportion reduction due to ITN (`interv.effect`), e.g., 0.8
#' - Inter-chamber variance (`chamber.var`), e.g., 0.1807
#' - Number of simulations (`nsim`), e.g., 100
#'
#' @param n.ch.per.trt Integer. Number of chambers per intvn level.
#'
#' @return A data frame with columns:
#' \describe{
#'   \item{replicates}{Replicate number within each intvn group}
#'   \item{intvn}{intvn level (e.g., 0 = no ITN, 1 = ITN)}
#'   \item{chamber}{Unique chamber identifier as a factor}
#' }
#'
#' @examples
#' sim.scen.shortsfe.sinint(4)
#'
#' @export
sim.scen.shortsfe.sinint <- function(n.ch.per.trt) {
  intvn.lev <- 0:1
  dat <- expand.grid(replicates = 1:n.ch.per.trt, intvn = intvn.lev)
  dat$chamber <- factor(paste(dat$intvn, dat$replicates, sep = "-"))
  dat <- dat[, c("replicates", "intvn", "chamber")]
  dat
}

#' Simulate Mosquito Count Data for Short-Term Semi-Field Experiment Testing Single Intervention
#'
#' Generates simulated mosquito count data under a short-term semi-field experimental design
#' with fixed effects for intvn, random effects for chamber variability, and Poisson-distributed outcomes.
#'
#' @param n.ch.per.trt Integer. Number of chambers per intvn level.
#' @param lambda Numeric. Mean mosquito count in control chambers.
#' @param interv.effect Numeric. Proportion reduction due to ITN.
#' @param chamber.var Numeric. Variance of random chamber effects.
#' @param use.random Logical, NULL, or "ALL".
#' If \code{TRUE}, returns mosquito counts simulated with random effects;
#' If \code{FALSE}, returns counts based on fixed effects only;
#' If \code{NULL}, returns expected counts from fixed effects (no sampling);
#' If \code{"ALL"}, returns the full dataset with all mosquito count columns.
#'
#' @return A data frame with the following columns, depending on \code{use.random}:
#' \describe{
#'   \item{replicates}{Replicate number within each intvn group}
#'   \item{intvn}{intvn level (0 = no ITN, 1 = ITN)}
#'   \item{chamber}{Unique chamber identifier}
#'   \item{lin.pred.fixed}{Linear predictor with fixed effects only}
#'   \item{mosquito.count.fixed.exp}{Expected counts from fixed effects (no sampling)}
#'   \item{mosquito.count.fixed}{Simulated counts based on fixed effects}
#'   \item{lin.pred.random}{Linear predictor including random chamber effects}
#'   \item{mosquito.count.random}{Simulated counts including random effects}
#' }
#'
#' @examples
#' sim.mosq.shortsfe.sinint(
#'   n.ch.per.trt = 4,
#'   lambda = 50,
#'   interv.effect = 0.8,
#'   chamber.var = 0.1807,
#'   use.random = "ALL"
#' )
#'
#' @importFrom stats rnorm rpois
#' @export
sim.mosq.shortsfe.sinint <- function(n.ch.per.trt, lambda, interv.effect, chamber.var, use.random = "ALL") {

  # Validate use.random
  if (!isTRUE(use.random) && !isFALSE(use.random) && !is.null(use.random) && !identical(use.random, "ALL")) {
    warning("Invalid use.random value. Returning full dataset.")
    use.random <- "ALL"
  }

  # Generate design
  dat <- sim.scen.shortsfe.sinint(n.ch.per.trt)

  # Fixed effect coefficients
  b.0 <- log(lambda)
  b.i <- log(1 - interv.effect)

  # Random chamber effects
  chamber.re <- rnorm(nlevels(dat$chamber), sd = sqrt(chamber.var))
  names(chamber.re) <- levels(dat$chamber)

  # Linear predictors
  dat$lin.pred.fixed <- b.0 + b.i * dat$intvn
  dat$lin.pred.random <- dat$lin.pred.fixed + chamber.re[as.character(dat$chamber)]

  # Simulated counts
  dat$mosquito.count.fixed.exp <- exp(dat$lin.pred.fixed)
  dat$mosquito.count.fixed <- rpois(nrow(dat), dat$mosquito.count.fixed.exp)
  dat$mosquito.count.random <- rpois(nrow(dat), exp(dat$lin.pred.random))

  # Return based on use.random
  if (isTRUE(use.random)) {
    return(dat[, c(names(dat)[1:which(names(dat) == "lin.pred.random")], "mosquito.count.random"), drop = FALSE])
  } else if (isFALSE(use.random)) {
    return(dat[, c(names(dat)[1:which(names(dat) == "lin.pred.random")], "mosquito.count.fixed"), drop = FALSE])
  } else if (is.null(use.random)) {
    return(dat[, c(names(dat)[1:which(names(dat) == "lin.pred.random")], "mosquito.count.fixed.exp"), drop = FALSE])
  } else {
    return(dat)
  }
}

#' Plot Mosquito Counts from Short-Term Semi-Field Experiment Testing Single Intervention
#'
#' Generates a boxplot of simulated mosquito counts grouped by intvn level (Control vs Intervention).
#' Uses output from `sim.mosq.shortsfe.sinint()` and overlays jittered points to show chamber-level variation.
#'
#' @param n.ch.per.trt Integer. Number of chambers per intvn level.
#' @param lambda Numeric. Mean mosquito count in control chambers.
#' @param interv.effect Numeric. Proportion reduction due to intervention.
#' @param chamber.var Numeric. Variance of random chamber effects.
#' @param use.random Logical or NULL.
#' If \code{TRUE}, plots mosquito counts simulated with random effects;
#' If \code{FALSE}, plots counts based on fixed effects only;
#' If \code{NULL}, plots expected counts from fixed effects (no sampling).
#' @param jitter Logical. If \code{TRUE}, overlays individual chamber-level points.
#'
#' @return A `ggplot` object showing mosquito counts by intvn group.
#'
#' @examples
#' sim.plot.shortsfe.sinint(
#'   n.ch.per.trt = 4,
#'   lambda = 50,
#'   interv.effect = 0.8,
#'   chamber.var = 0.1807,
#'   use.random = TRUE,
#'   jitter = TRUE
#' )
#'
#' @import ggplot2
#' @importFrom dplyr mutate
#' @export
sim.plot.shortsfe.sinint <- function(n.ch.per.trt, lambda, interv.effect, chamber.var,
                                     use.random = TRUE, jitter = TRUE) {

  # Validate use.random
  if (!isTRUE(use.random) && !isFALSE(use.random) && !is.null(use.random)) {
    stop("Invalid use.random value. Please use TRUE, FALSE, or NULL.")
  }

  # Simulate full dataset
  dat <- sim.mosq.shortsfe.sinint(n.ch.per.trt, lambda, interv.effect, chamber.var, use.random)

  # Assign readable intvn labels
  dat <- dplyr::mutate(dat,
                       Treatments = dplyr::case_when(
                         intvn == 0 ~ "Control",
                         intvn == 1 ~ "Intervention"))

  dat$Treatments <- factor(dat$Treatments, levels = c("Control", "Intervention"))

  # Select mosquito count column
  count.col <- if (isTRUE(use.random)) {
    "mosquito.count.random"
  } else if (isFALSE(use.random)) {
    "mosquito.count.fixed"
  } else {
    "mosquito.count.fixed.exp"
  }

  # Create boxplot
  p <- ggplot2::ggplot(dat, ggplot2::aes(x = Treatments, y = .data[[count.col]])) +
    ggplot2::geom_boxplot(outlier.shape = NA, fill = "lightblue") +
    ggplot2::labs(x = "Treatments",
                  y = "Mosquito Count",
                  title = "Mosquito Counts by intvn") +
    ggplot2::theme_bw()

  # Add jittered points if requested
  if (jitter) {
    p <- p + ggplot2::geom_jitter(width = 0.2, alpha = 0.6, color = "darkred")
  }

  return(p)
}

#' Extract p-value from Simulated GLMM for Short-Term Semi-Field Experiment Testing Single Intervention
#'
#' Simulates mosquito count data and fits a Poisson GLMM to estimate the effect
#' of ITN intvn. Returns the p-value associated with the intvn effect.
#'
#' @param n.ch.per.trt Integer. Number of chambers per intvn level.
#' @param lambda Numeric. Mean mosquito count in control chambers.
#' @param interv.effect Numeric. Proportion reduction due to ITN.
#' @param chamber.var Numeric. Variance of random chamber effects.
#' @param use.random Logical.
#' If \code{TRUE}, uses mosquito counts simulated with random effects;
#' If \code{FALSE}, uses counts based on fixed effects only.
#'
#' @return A named numeric vector:
#' \describe{
#'   \item{pvalue}{P-value for the intvn effect from the GLMM}
#' }
#'
#' @examples
#' sim.pval.shortsfe.sinint(
#'   n.ch.per.trt = 4,
#'   lambda = 50,
#'   interv.effect = 0.8,
#'   chamber.var = 0.1807,
#'   use.random = TRUE
#' )
#'
#' @importFrom lme4 glmer
#' @importFrom stats coef
#' @export
sim.pval.shortsfe.sinint <- function(n.ch.per.trt, lambda, interv.effect, chamber.var, use.random = TRUE) {

  # Validate use.random
  if (!isTRUE(use.random) && !isFALSE(use.random)) {
    stop("Invalid use.random value. Please use TRUE or FALSE.")
  }

  # Simulate full dataset
  simdat <- sim.mosq.shortsfe.sinint(n.ch.per.trt, lambda, interv.effect, chamber.var, use.random)

  # Choose response variable
  response.var <- if (isTRUE(use.random)) {
    "mosquito.count.random"
  } else {
    "mosquito.count.fixed"
  }

  # Rename selected count column to 'mosquito.count' for modeling
  simdat$mosquito.count <- simdat[[response.var]]

  # Fit GLMM
  model <- suppressMessages(suppressWarnings(
    lme4::glmer(mosquito.count ~ intvn + (1 | chamber),
                family = "poisson", data = simdat)
  ))

  # Extract p-value
  pvalue <- coef(summary(model))[2, "Pr(>|z|)"]

  return(c(pvalue = pvalue))
}

#' Estimate Empirical Power for Short-Term Semi-Field Experiment Testing Single Intervention
#'
#' Runs repeated simulations and GLMM fits to estimate empirical power
#' as the proportion of simulations with p-values below 0.05.
#'
#' @param nsim Integer. Number of simulation replicates.
#' @param n.ch.per.trt Integer. Number of chambers per intvn level.
#' @param lambda Numeric. Mean mosquito count in control chambers.
#' @param interv.effect Numeric. Proportion reduction due to ITN.
#' @param chamber.var Numeric. Variance of random chamber effects.
#' @param n.cores Integer. Number of cores to use for parallel processing.
#' @param use.random Logical.
#' If \code{TRUE}, uses mosquito counts simulated with random effects;
#' If \code{FALSE}, uses counts based on fixed effects only.
#'
#' @return A named numeric vector:
#' \describe{
#'   \item{power}{Estimated empirical power (rounded to two decimal places)}
#'   \item{ci.lower}{Lower bound of 95\% confidence interval}
#'   \item{ci.upper}{Upper bound of 95\% confidence interval}
#' }
#'
#' @note Parallel execution is supported via `n.cores`, but examples default to `n.cores = 1` for reproducibility and package checks.
#'
#' @examples
#' sim.power.shortsfe.sinint(
#'   nsim = 100,
#'   n.ch.per.trt = 4,
#'   lambda = 50,
#'   interv.effect = 0.8,
#'   chamber.var = 0.1807,
#'   n.cores = 1,
#'   use.random = TRUE
#' )
#'
#' @importFrom parallel makeCluster parLapply stopCluster clusterExport detectCores
#' @importFrom stats binom.test
#' @export
sim.power.shortsfe.sinint <- function(n.ch.per.trt, lambda, interv.effect, chamber.var, nsim,
                                      n.cores = 1, use.random = TRUE) {

  # Validate use.random
  if (!isTRUE(use.random) && !isFALSE(use.random)) {
    stop("Invalid use.random value. Please use TRUE or FALSE.")
  }

  # Define simulation wrapper
  sim_wrapper <- function(i) {
    result <- tryCatch(
      sim.pval.shortsfe.sinint(n.ch.per.trt, lambda, interv.effect, chamber.var, use.random),
      error = function(e) NA
    )
    result["pvalue"]
  }

  # Initialize progress bar
  pb <- utils::txtProgressBar(min = 0, max = nsim, style = 3)

  # Run simulations with progress
  if (n.cores > 1) {
    cl <- parallel::makeCluster(n.cores)
    on.exit(parallel::stopCluster(cl))
    parallel::clusterExport(cl, varlist = c("sim.pval.shortsfe.sinint", "n.ch.per.trt",
                                            "lambda", "interv.effect", "chamber.var", "use.random"),
                            envir = environment())

    pvals <- vector("list", nsim)
    for (i in seq_len(nsim)) {
      pvals[[i]] <- parallel::parLapply(cl, i, sim_wrapper)[[1]]
      utils::setTxtProgressBar(pb, i)
    }
  } else {
    pvals <- vector("list", nsim)
    for (i in seq_len(nsim)) {
      pvals[[i]] <- sim_wrapper(i)
      utils::setTxtProgressBar(pb, i)
    }
  }

  close(pb)

  # Flatten p-values and count significant results
  pvals <- unlist(pvals)
  n.sig <- sum(pvals < 0.05, na.rm = TRUE)

  # Estimate power and confidence interval
  power.estimate <- c(
    power = round(n.sig / nsim, 2),
    stats::binom.test(x = n.sig, n = nsim)$conf.int
  )
  names(power.estimate)[2:3] <- c("ci.lower", "ci.upper")

  return(power.estimate)
}
